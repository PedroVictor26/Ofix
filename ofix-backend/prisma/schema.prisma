// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Já está correto
  url      = env("DATABASE_URL")
}

// Autenticação e Usuários
model User {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  password  String
  // CORREÇÃO: 'enum' não é suportado, trocado para String
  role      String   @default("USER")
  oficinaId String?
  oficina   Oficina? @relation(fields: [oficinaId], references: [id])
  servicos  Servico[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// CORREÇÃO: Bloco 'enum' removido pois não é suportado pelo SQLite

model Oficina {
  id        String   @id @default(uuid())
  nome      String
  cnpj      String?  @unique
  telefone  String?
  endereco  String?
  
  users     User[]
  clientes  Cliente[]
  veiculos  Veiculo[]
  servicos  Servico[]
  pecas     Peca[]
  fornecedores Fornecedor[]
  procedimentosPadrao ProcedimentoPadrao[]
  mensagensPadrao   MensagemPadrao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Clientes e Veículos
// ARQUIVO: ofix-backend/prisma/schema.prisma

// ARQUIVO: ofix-backend/prisma/schema.prisma

// ARQUIVO: ofix-backend/prisma/schema.prisma

model Cliente {
  // --- Seus campos existentes ---
  id            String   @id @default(uuid())
  nomeCompleto  String
  // ...
  observacoes   String?
  veiculos      Veiculo[]
  servicos      Servico[]


  // --- ADICIONE ESTAS DUAS LINHAS PARA CONECTAR À OFICINA ---
  oficina       Oficina @relation(fields: [oficinaId], references: [id])
  oficinaId     String
  // -------------------------------------------------------------
}

model Veiculo {
  id            String    @id @default(uuid())
  placa         String    @unique
  marca         String
  modelo        String
  anoFabricacao Int?
  anoModelo     Int?
  cor           String?
  chassi        String?   @unique
  kmAtual       Int?

  clienteId     String
  cliente       Cliente   @relation(fields: [clienteId], references: [id])

  oficinaId     String?
  oficina       Oficina?  @relation(fields: [oficinaId], references: [id])

  servicos      Servico[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Serviços
model Servico {
  id                  String   @id @default(uuid())
  numeroOs            String   @unique
  // CORREÇÃO: 'enum' não é suportado, trocado para String
  status              String   @default("AGUARDANDO")
  descricaoProblema   String?
  descricaoSolucao    String?
  dataEntrada         DateTime @default(now())
  dataPrevisaoEntrega DateTime?
  dataConclusao       DateTime?
  dataEntregaCliente  DateTime?
  // CORREÇÃO: 'Decimal' não é suportado, trocado para Float
  valorTotalEstimado  Float?
  valorTotalServicos  Float?
  valorTotalPecas     Float?
  valorTotalFinal     Float?
  kmEntrada           Int?
  // CORREÇÃO: 'Json' não é suportado, trocado para String
  checklist           String?
  observacoes         String?

  clienteId           String
  cliente             Cliente  @relation(fields: [clienteId], references: [id])

  veiculoId           String
  veiculo             Veiculo  @relation(fields: [veiculoId], references: [id])

  responsavelId       String?
  responsavel         User?     @relation(fields: [responsavelId], references: [id])

  oficinaId           String
  oficina             Oficina  @relation(fields: [oficinaId], references: [id])

  itensPeca           ItemServicoPeca[]
  procedimentos       ProcedimentoPadraoServico[]
  mensagens           MensagemServico[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// CORREÇÃO: Bloco 'enum' removido pois não é suportado pelo SQLite

// Peças e Fornecedores
model Peca {
  id              String   @id @default(uuid())
  codigoInterno   String?  @unique
  codigoFabricante String?
  nome            String
  descricao       String?
  fabricante      String?
  unidadeMedida   String   @default("UN")
  // CORREÇÃO: 'Decimal' não é suportado, trocado para Float
  precoCusto      Float?
  precoVenda      Float
  estoqueAtual    Int      @default(0)
  estoqueMinimo   Int?     @default(0)
  localizacao     String?

  oficinaId       String
  oficina         Oficina  @relation(fields: [oficinaId], references: [id])

  fornecedorId    String?
  fornecedor      Fornecedor? @relation(fields: [fornecedorId], references: [id])

  servicos        ItemServicoPeca[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Fornecedor {
  id          String   @id @default(uuid())
  nome        String
  cnpjCpf     String?  @unique
  telefone    String?
  email       String?  @unique
  endereco    String?
  
  oficinaId   String
  oficina     Oficina  @relation(fields: [oficinaId], references: [id])

  pecas       Peca[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Tabela Pivot para Peças em um Serviço
model ItemServicoPeca {
  id          String  @id @default(uuid())
  servicoId   String
  servico     Servico @relation(fields: [servicoId], references: [id])

  pecaId      String
  peca        Peca    @relation(fields: [pecaId], references: [id])

  quantidade  Int
  // CORREÇÃO: 'Decimal' não é suportado, trocado para Float
  precoUnitarioCobrado Float
  valorTotal           Float

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([servicoId, pecaId])
}


// Procedimentos Padrão
model ProcedimentoPadrao {
  id                   String   @id @default(uuid())
  codigo               String?  @unique
  nome                 String
  descricao            String?
  // CORREÇÃO: 'Decimal' não é suportado, trocado para Float
  tempoEstimadoHoras   Float?
  // CORREÇÃO: 'Json' não é suportado, trocado para String
  checklistJson        String?

  oficinaId            String
  oficina              Oficina  @relation(fields: [oficinaId], references: [id])

  servicos             ProcedimentoPadraoServico[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// Tabela Pivot para Procedimentos em um Serviço
model ProcedimentoPadraoServico {
  id                  String    @id @default(uuid())
  servicoId           String
  servico             Servico   @relation(fields: [servicoId], references: [id])

  procedimentoPadraoId String
  procedimentoPadrao  ProcedimentoPadrao @relation(fields: [procedimentoPadraoId], references: [id])

  observacoes         String?
  concluido           Boolean   @default(false)
  dataConclusao       DateTime?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([servicoId, procedimentoPadraoId])
}

// Mensagens Padrão e Histórico de Mensagens
model MensagemPadrao {
  id          String   @id @default(uuid())
  codigo      String?  @unique
  nome        String
  template    String
  
  oficinaId   String
  oficina     Oficina  @relation(fields: [oficinaId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MensagemServico {
  id          String    @id @default(uuid())
  servicoId   String
  servico     Servico   @relation(fields: [servicoId], references: [id])

  conteudo    String
  tipoEnvio   String
  dataEnvio   DateTime  @default(now())
  enviadoPor  String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}